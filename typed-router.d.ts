/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    'root': RouteRecordInfo<'root', '/', Record<never, never>, Record<never, never>>,
    '$error': RouteRecordInfo<'$error', '/:error(.*)', { error: ParamValue<true> }, { error: ParamValue<false> }>,
    'categories': RouteRecordInfo<'categories', '/categories', Record<never, never>, Record<never, never>>,
    'client-subscriptions': RouteRecordInfo<'client-subscriptions', '/client-subscriptions', Record<never, never>, Record<never, never>>,
    'clinic-booking-requests': RouteRecordInfo<'clinic-booking-requests', '/clinic-booking-requests', Record<never, never>, Record<never, never>>,
    'clinic-reviews': RouteRecordInfo<'clinic-reviews', '/clinic-reviews', Record<never, never>, Record<never, never>>,
    'clinics': RouteRecordInfo<'clinics', '/clinics', Record<never, never>, Record<never, never>>,
    'clinics-booking-profiles': RouteRecordInfo<'clinics-booking-profiles', '/clinics/booking-profiles', Record<never, never>, Record<never, never>>,
    'completed-profiles': RouteRecordInfo<'completed-profiles', '/completed-profiles', Record<never, never>, Record<never, never>>,
    'consent-forms': RouteRecordInfo<'consent-forms', '/consent-forms', Record<never, never>, Record<never, never>>,
    'consent-forms-most-filled-consent-form-users': RouteRecordInfo<'consent-forms-most-filled-consent-form-users', '/consent-forms/most-filled-consent-form-users', Record<never, never>, Record<never, never>>,
    'consent-forms-thankyou-page-product-track': RouteRecordInfo<'consent-forms-thankyou-page-product-track', '/consent-forms/thankyou-page-product-track', Record<never, never>, Record<never, never>>,
    'dashboard': RouteRecordInfo<'dashboard', '/dashboard', Record<never, never>, Record<never, never>>,
    'dashboard-stats': RouteRecordInfo<'dashboard-stats', '/dashboard/stats', Record<never, never>, Record<never, never>>,
    'default-aftercare': RouteRecordInfo<'default-aftercare', '/default-aftercare', Record<never, never>, Record<never, never>>,
    'default-consent-forms': RouteRecordInfo<'default-consent-forms', '/default-consent-forms', Record<never, never>, Record<never, never>>,
    'deposits': RouteRecordInfo<'deposits', '/deposits', Record<never, never>, Record<never, never>>,
    'faces-pharmacy-banners': RouteRecordInfo<'faces-pharmacy-banners', '/faces-pharmacy-banners', Record<never, never>, Record<never, never>>,
    'faces-pharmacy-termsandconditions': RouteRecordInfo<'faces-pharmacy-termsandconditions', '/faces-pharmacy-termsandconditions', Record<never, never>, Record<never, never>>,
    'filled-consent-forms': RouteRecordInfo<'filled-consent-forms', '/filled-consent-forms', Record<never, never>, Record<never, never>>,
    'forms-products': RouteRecordInfo<'forms-products', '/forms-products', Record<never, never>, Record<never, never>>,
    'forms-products-consent-used': RouteRecordInfo<'forms-products-consent-used', '/forms-products/consent-used', Record<never, never>, Record<never, never>>,
    'forms-products-product-list': RouteRecordInfo<'forms-products-product-list', '/forms-products/product-list', Record<never, never>, Record<never, never>>,
    'forward-consent-forms': RouteRecordInfo<'forward-consent-forms', '/forward-consent-forms', Record<never, never>, Record<never, never>>,
    'insurances': RouteRecordInfo<'insurances', '/insurances', Record<never, never>, Record<never, never>>,
    'insurances-reorder': RouteRecordInfo<'insurances-reorder', '/insurances-reorder', Record<never, never>, Record<never, never>>,
    'insurances-requests': RouteRecordInfo<'insurances-requests', '/insurances-requests', Record<never, never>, Record<never, never>>,
    'insync-insurances-requests': RouteRecordInfo<'insync-insurances-requests', '/insync-insurances-requests', Record<never, never>, Record<never, never>>,
    'login': RouteRecordInfo<'login', '/login', Record<never, never>, Record<never, never>>,
    'marketing-campaigns': RouteRecordInfo<'marketing-campaigns', '/marketing-campaigns', Record<never, never>, Record<never, never>>,
    'medical-questions': RouteRecordInfo<'medical-questions', '/medical-questions', Record<never, never>, Record<never, never>>,
    'orders': RouteRecordInfo<'orders', '/orders', Record<never, never>, Record<never, never>>,
    'prescriber-leader-board': RouteRecordInfo<'prescriber-leader-board', '/prescriber-leader-board', Record<never, never>, Record<never, never>>,
    'prescriber-reviews': RouteRecordInfo<'prescriber-reviews', '/prescriber-reviews', Record<never, never>, Record<never, never>>,
    'prescribers-requests': RouteRecordInfo<'prescribers-requests', '/prescribers-requests', Record<never, never>, Record<never, never>>,
    'prescription-fees': RouteRecordInfo<'prescription-fees', '/prescription-fees', Record<never, never>, Record<never, never>>,
    'prescription-orders': RouteRecordInfo<'prescription-orders', '/prescription-orders', Record<never, never>, Record<never, never>>,
    'products': RouteRecordInfo<'products', '/products', Record<never, never>, Record<never, never>>,
    'products-review': RouteRecordInfo<'products-review', '/products/review', Record<never, never>, Record<never, never>>,
    'report-booking-and-consent-forms': RouteRecordInfo<'report-booking-and-consent-forms', '/report/booking-and-consent-forms', Record<never, never>, Record<never, never>>,
    'report-clinic-and-treatments': RouteRecordInfo<'report-clinic-and-treatments', '/report/clinic-and-treatments', Record<never, never>, Record<never, never>>,
    'report-shop': RouteRecordInfo<'report-shop', '/report/shop', Record<never, never>, Record<never, never>>,
    'second-page': RouteRecordInfo<'second-page', '/second-page', Record<never, never>, Record<never, never>>,
    'shopbanners': RouteRecordInfo<'shopbanners', '/shopbanners', Record<never, never>, Record<never, never>>,
    'sociallinks': RouteRecordInfo<'sociallinks', '/sociallinks', Record<never, never>, Record<never, never>>,
    'stripe-active-instant-payouts-users': RouteRecordInfo<'stripe-active-instant-payouts-users', '/stripe/active-instant-payouts-users', Record<never, never>, Record<never, never>>,
    'stripe-charge-back': RouteRecordInfo<'stripe-charge-back', '/stripe/charge-back', Record<never, never>, Record<never, never>>,
    'stripe-management': RouteRecordInfo<'stripe-management', '/stripe/management', Record<never, never>, Record<never, never>>,
    'treatments-list': RouteRecordInfo<'treatments-list', '/treatments-list', Record<never, never>, Record<never, never>>,
    'users': RouteRecordInfo<'users', '/users', Record<never, never>, Record<never, never>>,
    'users-bookings-list': RouteRecordInfo<'users-bookings-list', '/users/bookings-list', Record<never, never>, Record<never, never>>,
    'users-calender': RouteRecordInfo<'users-calender', '/users/calender', Record<never, never>, Record<never, never>>,
    'users-consent-form-without-clinic-user-list': RouteRecordInfo<'users-consent-form-without-clinic-user-list', '/users/consent-form-without-clinic-user-list', Record<never, never>, Record<never, never>>,
    'users-consent-form-without-treatment-user-list': RouteRecordInfo<'users-consent-form-without-treatment-user-list', '/users/consent-form-without-treatment-user-list', Record<never, never>, Record<never, never>>,
    'users-groups': RouteRecordInfo<'users-groups', '/users/groups', Record<never, never>, Record<never, never>>,
    'users-hair-prescription-enrolled-users': RouteRecordInfo<'users-hair-prescription-enrolled-users', '/users/hair-prescription-enrolled-users', Record<never, never>, Record<never, never>>,
    'users-hair-prescription-list': RouteRecordInfo<'users-hair-prescription-list', '/users/hair-prescription-list', Record<never, never>, Record<never, never>>,
    'users-notification': RouteRecordInfo<'users-notification', '/users/notification', Record<never, never>, Record<never, never>>,
    'vendors': RouteRecordInfo<'vendors', '/vendors', Record<never, never>, Record<never, never>>,
    'vendors-discount-codes': RouteRecordInfo<'vendors-discount-codes', '/vendors/discount-codes', Record<never, never>, Record<never, never>>,
    'vendors-pharma-leaderboard': RouteRecordInfo<'vendors-pharma-leaderboard', '/vendors/pharma-leaderboard', Record<never, never>, Record<never, never>>,
    'vendors-zing-commissions': RouteRecordInfo<'vendors-zing-commissions', '/vendors/zing-commissions', Record<never, never>, Record<never, never>>,
    'wallet-management-add-money': RouteRecordInfo<'wallet-management-add-money', '/wallet-management/add-money', Record<never, never>, Record<never, never>>,
    'wallet-management-history': RouteRecordInfo<'wallet-management-history', '/wallet-management/history', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
